// import React, { useState, useEffect, useContext, createContext } from 'react';

// // firebase
// import {
//   createUserWithEmailAndPassword,
//   signInWithEmailAndPassword,
//   signOut,
//   onAuthStateChanged,
//   sendPasswordResetEmail,
//   confirmPasswordReset,
//   updateProfile,
//   UserCredential,
// } from 'firebase/auth';
// import { auth } from '../firestore-config';

// // Types
// import {
//   userState,
//   authContextDefault,
//   firebaseAuthResponseObj,
//   firebaseAuthResponseUserObj,
// } from '../@types/types';

// // TODO: remove test auth
// // export const useTestAuth = () => {
// //   const [user, setUser] = useState<null | boolean>(null);

// //   const handleLogin = () => setUser(true);
// //   const handleLogout = () => setUser(null);

// //   return { user, handleLogin, handleLogout };
// // };

// // displayName: null,
// // email: null,
// // uid: null,

// const authContext = createContext<authContextDefault>(null!);

// // App wrapper component (React context provider)
// export const ProvideAuth = ({ children }: any) => {
//   const authState = useProvideAuth();

//   return (
//     <authContext.Provider value={authState as authContextDefault}>
//       {children}
//     </authContext.Provider>
//   );
// };

// // context consumer (import to components for consumption)
// export const useAuth = () => {
//   return useContext(authContext);
// };

// export const useProvideAuth = (): authContextDefault => {
//   const [user, setUser] = useState<userState | null>(null);
//   const [loadingAuth, setloadingAuth] = useState<boolean>(false);
//   // const [user, setUser] = useState<any>();

//   // TODO: add further validation
//   // const validate = (email: string | null, password: string | null) => {
//   //   if (typeof email !== 'string' || typeof password !== 'string')
//   //   return console.log('Error email or password is invalid!');

//   //   const emailValid =
//   //   /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(
//   //     String(email).toLowerCase()
//   //     );
//   //     const passwordValid = password.toString().length > 6;
//   //     return { emailValid, passwordValid };
//   //   };

//   const updateDisplayName = async (newDisplayName: string) => {
//     await updateProfile(auth.currentUser!, {
//       displayName: newDisplayName,
//     })
//       .then(() => {
//         console.log('DisplayName updated');
//         return user;
//       })
//       .catch((error) => console.log('update displayName error', error));
//   };

//   const signinUser = (
//     email: string | null,
//     password: string | null,
//     callback: VoidFunction
//   ) => {
//     if (typeof email !== 'string' || typeof password !== 'string')
//       return console.log('Error email or password is invalid!');
//     signInWithEmailAndPassword(auth, email, password)
//       .then((userDataObj: UserCredential) => {
//         console.log('User has logged in', userDataObj);

//         setUser((_prevState) => userDataObj.user);

//         callback();
//         console.log('user', user);

//         return user;
//       })
//       .catch((err) => {
//         console.log(err.message);
//       });
//   };

//   const createUser = (
//     displayName: string,
//     email: string,
//     password: string,
//     callback: VoidFunction
//   ) => {
//     if (
//       typeof displayName !== 'string' ||
//       typeof email !== 'string' ||
//       typeof password !== 'string'
//     )
//       return console.log('Error name, email, or password is invalid!');

//     createUserWithEmailAndPassword(auth, email, password)
//       .then(async (userDataObj: UserCredential) => {
//         // automatically logged in after signup
//         console.log('User has been created/logged in', userDataObj.user);
//         await updateDisplayName(displayName);

//         setUser((_prevState) => userDataObj.user);

//         console.log('user', user);
//         localStorage.setItem('authToken', userDataObj.user.refreshToken);
//         callback();
//         return user;
//       })
//       .catch((err) => {
//         // TODO: add error message under password field UI
//         console.log(err.message);
//       });
//   };

//   const signoutUser = (callback: VoidFunction) =>
//     // const signoutUser = () =>
//     signOut(auth)
//       .then(async () => {
//         console.log(user, 'User signed out');
//         setUser((_prevState: any) => null);

//         console.log(user, 'User signed out');
//         callback();
//         return Promise.resolve(user);
//       })
//       .catch((err) => {
//         console.log(err.message);
//       });

//   // const resetPasswordByEmail = (email: string | null) => {
//   //   if (typeof email !== 'string')
//   //     return console.log('Error name, email, or password is invalid!');
//   //   sendPasswordResetEmail(auth, email)
//   //     .then(() => {
//   //       return true;
//   //     })
//   //     .catch((err) => {
//   //       console.log(err.message);
//   //     });
//   // };

//   useEffect(() => {
//     const unsubscribe = onAuthStateChanged(auth, (userDataObj) => {
//       if (userDataObj) {
//         console.log('Userstate is logged in via useEffect');
//         setUser(userDataObj);
//       } else {
//         console.log('Userstate set to null');

//         setUser(null);
//       }
//     });

//     return () => unsubscribe();
//   }, []);

//   return {
//     user,
//     createUser,
//     signinUser,
//     signoutUser,
//     sendPasswordResetEmail,
//     confirmPasswordReset,
//   };
// };
